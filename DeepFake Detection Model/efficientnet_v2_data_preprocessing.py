# -*- coding: utf-8 -*-
"""EfficientNet-V2 Data preprocessing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XyvawN6LUdDbnDlH5-MxzdWIEYJMi_-6

# EfficientNet-v2 Deepfake 탐지 모델 DATA 전처리 과정
"""

from google.colab import drive
drive.mount('/content/drive') # 구글 드라이브 마운트

!pip install opencv-python #opencv 설치

import torch

# CUDA가 사용 가능한지 확인
print(torch.cuda.is_available())  # True면 GPU가 사용 가능, False면 사용 불가

# CUDA의 cuDNN 버전 확인
print(torch.backends.cudnn.version())

# PyTorch 버전 확인
print(torch.__version__)

"""# 비디오에서 이미지로 변환

"""

import cv2
import os

# 비디오 폴더 경로 설정
video_folder = '/content/drive/MyDrive/KO_DATASET/R/train_real_video'  # 구글 드라이브에 있는 비디오 파일 폴더 경로
save_dir = '/content/drive/MyDrive/KO_DATASET/R/train_real_image'  # 이미지 저장할 폴더 , real 이미지 데이터 폴더

# 디렉토리가 없으면 생성
if not os.path.exists(save_dir):
    os.makedirs(save_dir)

# 전역적으로 사용될 이미지 카운터
global_count = 0

# 비디오 폴더 내 모든 비디오 파일에 대해 처리
for video_file in os.listdir(video_folder):
    video_path = os.path.join(video_folder, video_file)  # 각 비디오 파일의 경로
    vidcap = cv2.VideoCapture(video_path)

    success, image = vidcap.read()

    while success:
        # 매 프레임 저장 (global_count를 사용하여 모든 비디오 파일에서 연속적인 숫자로 저장)
        cv2.imwrite(os.path.join(save_dir, f"R_test_{global_count}.jpg"), image)
        success, image = vidcap.read()
        print(f"Saved frame {global_count} from {video_file}")
        global_count += 1

print("모든 비디오 파일의 프레임 저장 완료!")

"""## 2. 얼굴 인식 후 224 x 224로 resize를 진행한다


"""

!pip install opencv-python mtcnn #mtcnn 설치

!pip install facenet-pytorch

import os
import cv2
import torch
from facenet_pytorch import MTCNN
from concurrent.futures import ThreadPoolExecutor

# MTCNN 얼굴 탐지기 초기화 (GPU 사용 설정)
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print(f"Using device: {device}")
mtcnn = MTCNN(keep_all=True, device=device)  # GPU 사용 설정

# 이미지 파일이 들어있는 폴더 경로
image_dir = '/content/drive/MyDrive/KO_DATASET/R/train_real_image'  # 이미지가 저장된 폴더 경로
save_dir = '/content/drive/MyDrive/KO_DATASET/R/train_resize_real_image' # 리사이즈된 얼굴 이미지 저장할 폴더

# 디렉토리가 없으면 생성
if not os.path.exists(save_dir):
    os.makedirs(save_dir)

# 이미지 파일 목록 불러오기
image_files = [f for f in os.listdir(image_dir) if os.path.isfile(os.path.join(image_dir, f))]

# 전역 카운터 설정
global_count = 0

# 이미지 처리 함수
def process_image(image_file):
    global global_count
    image_path = os.path.join(image_dir, image_file)

    # 이미지 읽기
    image = cv2.imread(image_path)
    if image is None:
        print(f"Could not read image {image_file}")
        return

    # 얼굴 인식 (GPU 사용)
    boxes, _ = mtcnn.detect(image)

    if boxes is not None:
        for box in boxes:
            x, y, width, height = [int(v) for v in box]
            x, y = abs(x), abs(y)  # 음수 값 방지

            # 얼굴 영역 잘라내기
            face = image[y:height, x:width]

            # 얼굴 이미지 Resize (224x224)
            resized_image = cv2.resize(face, (224, 224))

            # 리사이즈된 이미지 저장 (파일 이름에 전역 카운트 사용)
            save_path = os.path.join(save_dir, f"train_{global_count}.jpg")
            cv2.imwrite(save_path, resized_image)
            print(f"Saved resized face {global_count} from {image_file}")

            # 카운터 증가
            global_count += 1

# 병렬 처리로 이미지 처리
with ThreadPoolExecutor() as executor:
    executor.map(process_image, image_files)

print("모든 얼굴 이미지 리사이즈 및 저장 완료!")